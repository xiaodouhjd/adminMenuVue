(function () {
    var SNUserAgent = window.navigator.userAgent.toLowerCase(); var isAndroid = SNUserAgent.indexOf("android") > -1; var flag = false; if (isAndroid) { if (SNUserAgent.indexOf("snyifubaoplugin") > -1) { var pluginVersion = SNUserAgent.substring(SNUserAgent.indexOf("snyifubaoplugin") + "snyifubaoplugin".length + 1); if (pluginVersion >= "1.3.0") { flag = true } } else { if (SNUserAgent.indexOf("snyifubao") > -1 && SNUserAgent.indexOf("ebuy") <= -1) { var EPAversion = SNUserAgent.substring(SNUserAgent.indexOf("snyifubao") + "snyifubao".length + 1); if (EPAversion >= "5.0.0") { flag = true } } } } else { flag = true; if (window.SNFNativeClient) { return } var messagingIframe; var sendMessageQueue_SUNINGJINRONG = []; var sendMessageQueue_SNPAYSDK = []; var receiveMessageQueue_SUNINGJINRONG = []; var receiveMessageQueue_SNPAYSDK = []; var messageHandlers = {}; var CUSTOM_PROTOCOL_SCHEME_SUNINGJINRONG = "suningwvjbscheme"; var CUSTOM_PROTOCOL_SCHEME_SNPAYSDK = "snmpwvjbscheme"; var QUEUE_HAS_MESSAGE = "__WVJB_QUEUE_MESSAGE__"; var responseCallbacks = {}; var uniqueId = 1; function _createQueueReadyIframe(doc) { messagingIframe = doc.createElement("iframe"); messagingIframe.style.display = "none"; doc.documentElement.appendChild(messagingIframe) } function configWebView() { document.documentElement.style.webkitUserSelect = "none"; document.documentElement.style.webkitTouchCallout = "none" } function send_SNF(data, responseCallback) { _doSend_SNF({ data: data }, responseCallback) } function send_PaySDK(data, responseCallback) { _doSend_PaySDK({ data: data }, responseCallback) } function _doSend_SNF(message, responseCallback) { if (responseCallback) { var callbackId = "cb_" + (uniqueId++) + "_" + new Date().getTime(); responseCallbacks[callbackId] = responseCallback; message["callbackId"] = callbackId } sendMessageQueue_SUNINGJINRONG.push(message); messagingIframe.src = CUSTOM_PROTOCOL_SCHEME_SUNINGJINRONG + "://" + QUEUE_HAS_MESSAGE } function _doSend_PaySDK(message, responseCallback) { if (responseCallback) { var callbackId = "cb_" + (uniqueId++) + "_" + new Date().getTime(); responseCallbacks[callbackId] = responseCallback; message["callbackId"] = callbackId } sendMessageQueue_SNPAYSDK.push(message); messagingIframe.src = CUSTOM_PROTOCOL_SCHEME_SNPAYSDK + "://" + QUEUE_HAS_MESSAGE } function _fetchQueue_SNF() { var messageQueueString = JSON.stringify(sendMessageQueue_SUNINGJINRONG); sendMessageQueue_SUNINGJINRONG = []; return messageQueueString } function _fetchQueue_PaySDK() { var messageQueueString = JSON.stringify(sendMessageQueue_SNPAYSDK); sendMessageQueue_SNPAYSDK = []; return messageQueueString } function callHandler_SNF(handlerName, data, responseCallback) { _doSend_SNF({ handlerName: handlerName, data: data }, responseCallback) } function callHandler_PaySDK(handlerName, json, responseCallback) { var data; if (typeof json == "string") { data = JSON.parse(json) } else { data = json } _doSend_PaySDK({ handlerName: handlerName, data: data }, responseCallback) } function registerHandler(handlerName, handler) { messageHandlers[handlerName] = handler } function _dispatchMessageFromObjC_SNF(messageJSON) { setTimeout(function _timeoutDispatchMessageFromObjC() { var message = JSON.parse(messageJSON); var messageHandler; var responseCallback; if (message.responseId) { responseCallback = responseCallbacks[message.responseId]; if (!responseCallback) { return } responseCallback(message.responseData); delete responseCallbacks[message.responseId] } else { if (message.callbackId) { var callbackResponseId = message.callbackId; responseCallback = function (responseData) { _doSend_SNF({ responseId: callbackResponseId, responseData: responseData }) } } var handler; if (message.handlerName) { handler = messageHandlers[message.handlerName] } try { handler(message.data, responseCallback) } catch (exception) { if (typeof console != "undefined") { console.log("SNNativeClient: WARNING: javascript handler threw.", message, exception) } } } }) } function _dispatchMessageFromObjC_PaySDK(messageJSON) { setTimeout(function _timeoutDispatchMessageFromObjC() { var message = JSON.parse(messageJSON); var messageHandler; var responseCallback; if (message.responseId) { responseCallback = responseCallbacks[message.responseId]; if (!responseCallback) { return } responseCallback(message.responseData); delete responseCallbacks[message.responseId] } else { if (message.callbackId) { var callbackResponseId = message.callbackId; responseCallback = function (responseData) { _doSend_PaySDK({ responseId: callbackResponseId, responseData: responseData }) } } var handler; if (message.handlerName) { handler = messageHandlers[message.handlerName] } try { handler(message.data, responseCallback) } catch (exception) { if (typeof console != "undefined") { console.log("YifubaoJSBridge: WARNING: javascript handler threw.", message, exception) } } } }) } function _handleMessageFromObjC_SNF(messageJSON) { if (receiveMessageQueue_SUNINGJINRONG) { receiveMessageQueue_SUNINGJINRONG.push(messageJSON) } else { _dispatchMessageFromObjC_SNF(messageJSON) } } function _handleMessageFromObjC__PaySDK(messageJSON) { if (receiveMessageQueue_SNPAYSDK) { receiveMessageQueue_SNPAYSDK.push(messageJSON) } else { _dispatchMessageFromObjC_PaySDK(messageJSON) } } } if (flag) {
        function checkJsApi(jsonObject) {
            if (isAndroid) { var str = JSON.stringify({ "methodName": "checkJsApi", "jsonValue": jsonObject }); prompt(str) } else {
                SNNativeClient.callHandler("checkJsApi", jsonObject)
            }
        } function openLinkInSafari(url) { if (!isAndroid) { SNNativeClient.callHandler("openLinkInSafari", { "url": url }) } } function registerAccount() { if (!isAndroid) { SNNativeClient.callHandler("registerAccount", null) } } function getDeviceModel() { if (!isAndroid) { SNNativeClient.callHandler("getDeviceModel", null) } } function getOS() { if (isAndroid) { var str = JSON.stringify({ "methodName": "getOS" }); return prompt(str) } } function scanQRCode(needResult) { if (isAndroid) { var str = JSON.stringify({ "methodName": "scanQRCode", "jsonValue": needResult }); prompt(str) } } function backToRootViewCtr() { if (isAndroid) { var str = JSON.stringify({ "methodName": "backToRootViewCtr" }); prompt(str) } } function toBack() { if (isAndroid) { var str = JSON.stringify({ "methodName": "toBack" }); prompt(str) } } function openRechargeSDK(orderInfo) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openRechargeSDK", "jsonValue": orderInfo }); prompt(str) } } function getNetworkType(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getNetworkType" }); return prompt(str) } else { SNNativeClient.callHandler("getNetworkType", jsonObject) } } function openSMSMessage(smsValue) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openSMSMessage", "jsonValue": smsValue }); prompt(str) } else { SNNativeClient.callHandler("openSMSMessage", smsValue) } } function showRightButtonsOfCrowdfunding(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "showRightButtonsOfCrowdfunding", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("showRightButtonsOfCrowdfunding", { "jsonString": jsonString }) } } function jumpLoginOfBill(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "jumpLoginOfBill", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("jumpLoginOfBill", { "jsonString": jsonString }) } } function YFBGetBankCardIDFromBWC(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "YFBGetBankCardIDFromBWC", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("YFBGetBankCardIDFromBWC", { "jsonString": jsonString }) } } function openTransferSDK(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openTransferSDK", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("openTransferSDK", { "jsonString": jsonString }) } } function callSystemSms(mobileNO, smsText) { if (isAndroid) { var jsonStr = JSON.stringify({ "mobileNO": mobileNO, "smsText": smsText }); var str = JSON.stringify({ "methodName": "callSystemSms", "jsonValue": jsonStr }); prompt(str) } else { SNNativeClient.callHandler("callSystemSms", { "bankTelNo": mobileNO, "templateContent": smsText }) } } function getMobileContact() { if (isAndroid) { var str = JSON.stringify({ "methodName": "getMobileContact" }); return prompt(str) } else { SNNativeClient.callHandler("getMobileContact", null) } } function gotoFund() { if (isAndroid) { var str = JSON.stringify({ "methodName": "gotoFund" }); prompt(str) } else { SNNativeClient.callHandler("gotoFund", null) } } function gotoYifubaoBalance(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "gotoYifubaoBalance", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("gotoYifubaoBalance", { "jsonString": jsonString }) } } function callRealName(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callRealName", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callRealName", jsonObject) } } function advancedAuth(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "advancedAuth", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("advancedAuth", jsonString) } } function FaceIdcheck(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "FaceIdcheck", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("FaceIdcheck", { "jsonString": jsonString }) } } function getCameraPermission() { if (isAndroid) { var str = JSON.stringify({ "methodName": "getCameraPermission" }); prompt(str) } else { SNNativeClient.callHandler("getCameraPermission", null) } } function callPhoneNumber(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callPhoneNumber", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("callPhoneNumber", { "jsonString": jsonString }) } } function advancedRealName() { if (isAndroid) { var str = JSON.stringify({ "methodName": "advancedRealName" }); prompt(str) } else { SNNativeClient.callHandler("advancedRealName", null) } } function logonOut(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "logonOut", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("logonOut", jsonObject) } } function freedomUnfreeze() { if (isAndroid) { var str = JSON.stringify({ "methodName": "freedomUnfreeze" }); prompt(str) } else { SNNativeClient.callHandler("freedomUnfreeze", null) } } function fundZhuanRu(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "fundZhuanRu", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("fundZhuanRu", { "jsonString": jsonString }) } } function showRightButtons(jsonString) {
            if (isAndroid) { var str = JSON.stringify({ "methodName": "showRightButtons", "jsonValue": jsonString }); prompt(str) } else {
                SNNativeClient.callHandler("showRightButtons", { "buttonItems": jsonString })
            }
        } function showRightButtonMenu(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "showRightButtonMenu", "jsonValue": jsonString }); prompt(str) } else { if (SNUserAgent.indexOf("ebuy-snyifubao") > -1) { SNNativeClient.callHandler("showRightButtonMenu", { "jsonString": jsonString }) } else { SNNativeClient.callHandler("showRightButtonMenu", { "buttonItems": jsonString }) } } } function showNavRightButtonRedDot(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "showNavRightButtonRedDot", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("showNavRightButtonRedDot", { "redDotItems": jsonString }) } } function toHomeActivity() { if (isAndroid) { var str = JSON.stringify({ "methodName": "toHomeActivity" }); prompt(str) } else { SNNativeClient.callHandler("toHomeActivity", null) } } function callNativeShare(title, content, targetUrl, iconUrl, type) { if (isAndroid) { var jsonStr = JSON.stringify({ "shareTitle": title, "shareContent": content, "shareUrl": targetUrl, "imageUrl": iconUrl, "type": type }); var str = JSON.stringify({ "methodName": "callNativeShare", "jsonValue": jsonStr }); prompt(str) } else { var data = { "title": title, "content": content, "targetUrl": targetUrl, "iconUrl": iconUrl, "type": type }; SNNativeClient.callHandler("callNativeShare", data, null) } } function callNativeShare2(shareKey) { if (isAndroid) { var jsonStr = JSON.stringify({ "shareKey": shareKey }); var str = JSON.stringify({ "methodName": "callNativeShare2", "jsonValue": jsonStr }); prompt(str) } else { var data = { "shareKey": shareKey, }; SNNativeClient.callHandler("callNativeShare2", data, null) } } function callNativeShare3(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callNativeShare3", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callNativeShare3", jsonObject, null) } } function callNativeShareUrl(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callNativeShareUrl", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callNativeShareUrl", jsonObject, null) } } function callNativeShareImage(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callNativeShareImage", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callNativeShareImage", jsonObject, null) } } function syncCookie() { if (isAndroid) { var str = JSON.stringify({ "methodName": "syncCookie" }); prompt(str) } else { SNNativeClient.callHandler("syncCookie", null) } } function closeWebView() { if (isAndroid) { var str = JSON.stringify({ "methodName": "closeWebView" }); prompt(str) } else { SNNativeClient.callHandler("closeWebView", null) } } function openUnit(unitName, data) { if (isAndroid) { var jsonStr = JSON.stringify({ "unitName": unitName, "data": data }); var str = JSON.stringify({ "methodName": "openUnit", "jsonValue": jsonStr }); prompt(str) } else { var openUnitData = { "unitName": unitName, "data": data }; SNNativeClient.callHandler("openUnit", openUnitData) } } function getIMEI() { if (isAndroid) { var str = JSON.stringify({ "methodName": "getIMEI" }); return prompt(str) } else { SNNativeClient.callHandler("getIMEI", null) } } function getIMEIByEncrypt() { if (isAndroid) { var str = JSON.stringify({ "methodName": "getIMEIByEncrypt" }); return prompt(str) } else { SNNativeClient.callHandler("getIMEIByEncrypt", null) } } function getDeviceInfo() { if (isAndroid) { var str = JSON.stringify({ "methodName": "getDeviceInfo" }); prompt(str) } else { SNNativeClient.callHandler("getDeviceInfo", null) } } function updateTitle(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "updateTitle", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("updateTitle", { "jsonString": jsonString }) } } function callCloudOpenAccountService(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callCloudOpenAccountService", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("callCloudOpenAccountService", { "jsonString": jsonString }) } } function statH5Performance(jsonString) { if (isAndroid) { var str = JSON.stringify({ "methodName": "statH5Performance", "jsonValue": jsonString }); prompt(str) } else { SNNativeClient.callHandler("statH5Performance", { "jsonString": jsonString }) } } function openOnlineService(params) { if (isAndroid) { var jsonStr = JSON.stringify({ "channelId": params }); var str = JSON.stringify({ "methodName": "openOnlineService", "jsonValue": jsonStr }); prompt(str) } else { SNNativeClient.callHandler("openOnlineService", params) } } function showConversationList() { if (isAndroid) { var str = JSON.stringify({ "methodName": "showConversationList" }); prompt(str) } else { SNNativeClient.callHandler("showConversationList", null) } } function getFullDeviceInfo(infohandler) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getFullDeviceInfo", "jsonValue": infohandler }); prompt(str) } else { SNNativeClient.callHandler("getFullDeviceInfo", infohandler) } } function transferDetailShare(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "transferDetailShare", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("transferDetailShare", jsonObject) } } function openTransferBillDetail(jsonObject) {
            if (isAndroid) { var str = JSON.stringify({ "methodName": "openTransferBillDetail", "jsonValue": jsonObject }); prompt(str) } else {
                SNNativeClient.callHandler("openTransferBillDetail", jsonObject)
            }
        } function openPaymentCode() { if (isAndroid) { var str = JSON.stringify({ "methodName": "openPaymentCode", }); prompt(str) } else { SNNativeClient.callHandler("openPaymentCode", null) } } function showOrHiddenBkBtn(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "showOrHiddenBkBtn", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("showOrHiddenBkBtn", jsonObject) } } function getRiskToken(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getRiskToken", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("getRiskToken", jsonObject) } } function openContactTransfer() { if (isAndroid) { var str = JSON.stringify({ "methodName": "openContactTransfer", }); prompt(str) } else { SNNativeClient.callHandler("openContactTransfer", null) } } function openRecharge(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openRecharge", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("openRecharge", jsonObject) } } function showOrHiddenNavigationBar(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "showOrHiddenNavigationBar", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("showOrHiddenNavigationBar", jsonObject) } } function callCustomCloseAction(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callCustomCloseAction", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callCustomCloseAction", jsonObject) } } function callCustomBackAction(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callCustomBackAction", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callCustomBackAction", jsonObject) } } function callBackAction() { if (isAndroid) { var str = JSON.stringify({ "methodName": "callBackAction" }); prompt(str) } else { SNNativeClient.callHandler("callBackAction", null) } } function callTaskCountdown(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callTaskCountdown", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callTaskCountdown", jsonObject) } } function setTitleBarBgAndTextColor(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "setTitleBarBgAndTextColor", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("setTitleBarBgAndTextColor", jsonObject) } } function collectH5ErrorLog(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "collectH5ErrorLog", "jsonValue": jsonObject }); prompt(str) } else { } } function collectH5LogInfo(jsonObject) { try { if (jsonObject && jsonObject.infoDetail && typeof jsonObject.infoDetail == "string" && jsonObject.infoDetail.length > 100) { return } } catch (error) { } if (isAndroid) { var str = JSON.stringify({ "methodName": "collectH5LogInfo", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("collectH5LogInfo", jsonObject) } } function openMobileFlowRecharge(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openMobileFlowRecharge", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("openMobileFlowRecharge", jsonObject) } } function chooseImage(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "chooseImage", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("chooseImage", jsonObject) } } function chooseImageAndUpload(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "chooseImageAndUpload", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("chooseImageAndUpload", jsonObject) } } function openPicPreview(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openPicPreview", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("openPicPreview", jsonObject) } } function openRenXingLoan() { if (isAndroid) { var str = JSON.stringify({ "methodName": "openRenXingLoan", }); prompt(str) } else { SNNativeClient.callHandler("openRenXingLoan", null) } } function openMembershipScore() { if (isAndroid) { var str = JSON.stringify({ "methodName": "openMembershipScore", }); prompt(str) } else { SNNativeClient.callHandler("openMembershipScore", null) } } function openAddBankCard(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openAddBankCard", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("openAddBankCard", jsonObject) } } function getRealNameStatus(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getRealNameStatus", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("getRealNameStatus", jsonObject) } } function openScanQRCode(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openScanQRCode", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("openScanQRCode", jsonObject) } } function callXMBikeUnlockSDK(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callXMBikeUnlockSDK", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callXMBikeUnlockSDK", jsonObject) } } function getLocationPermission(jsonObject) {
            if (isAndroid) { var str = JSON.stringify({ "methodName": "getLocationPermission", "jsonValue": jsonObject }); prompt(str) } else {
                SNNativeClient.callHandler("getLocationPermission", jsonObject)
            }
        } function getLocationPermissionForLoan(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getLocationPermissionForLoan", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("getLocationPermissionForLoan", jsonObject) } } function getLoginStatus(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getLoginStatus", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("getLoginStatus", jsonObject) } } function callPaymentSetting() { if (isAndroid) { var str = JSON.stringify({ "methodName": "callPaymentSetting" }); prompt(str) } else { SNNativeClient.callHandler("callPaymentSetting", null) } } function callModifyBindMobile() { if (isAndroid) { var str = JSON.stringify({ "methodName": "callModifyBindMobile" }); prompt(str) } else { SNNativeClient.callHandler("callModifyBindMobile", null) } } function callResetPayPwd(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callResetPayPwd", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callResetPayPwd", jsonObject) } } function callResetLoginPwd(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callResetLoginPwd", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callResetLoginPwd", jsonObject) } } function callBillModule(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callBillModule", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callBillModule", jsonObject) } } function callUserFeedback() { if (isAndroid) { var str = JSON.stringify({ "methodName": "callUserFeedback" }); prompt(str) } else { SNNativeClient.callHandler("callUserFeedback", null) } } function setH5PageInfo(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "setH5PageInfo", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("setH5PageInfo", jsonObject) } } function saveImgToAlbum(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "saveImgToAlbum", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("saveImgToAlbum", jsonObject) } } function snBankGetRiskInfo(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "snBankGetRiskInfo", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("snBankGetRiskInfo", jsonObject) } } function snBankCallUploadIDCard(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "snBankCallUploadIDCard", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("snBankCallUploadIDCard", jsonObject) } } function callThanksForTheRedEnvelope(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callThanksForTheRedEnvelope", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callThanksForTheRedEnvelope", jsonObject) } } function openMyRedpacket(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openMyRedpacket", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("openMyRedpacket", jsonObject) } } function callNewRealName(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callNewRealName", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callNewRealName", jsonObject) } } function openEBuyRedpacket(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openEBuyRedpacket", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("openEBuyRedpacket", jsonObject) } } function callBillDetail(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callBillDetail", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callBillDetail", jsonObject) } } function deviceIsSupportTouchID(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "deviceIsSupportTouchID", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("deviceIsSupportTouchID", jsonObject) } } function isSupportOpenTouchIDPay(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "isSupportOpenTouchIDPay", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("isSupportOpenTouchIDPay", jsonObject) } } function callOpenTouchIDPay(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callOpenTouchIDPay", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callOpenTouchIDPay", jsonObject) } } function callVisualTelephone(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callVisualTelephone", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callVisualTelephone", jsonObject) } } function getAddressBook(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getAddressBook", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("getAddressBook", jsonObject) } } function callSystemAddressBook(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callSystemAddressBook", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callSystemAddressBook", jsonObject) } } function getLocationInfo(jsonObject) {
            if (isAndroid) { var str = JSON.stringify({ "methodName": "getLocationInfo", "jsonValue": jsonObject }); prompt(str) } else {
                SNNativeClient.callHandler("getLocationInfo", jsonObject)
            }
        } function callMemberTaskCenter(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callMemberTaskCenter", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callMemberTaskCenter", jsonObject) } } function deviceIsSupportBioAuthPay(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "deviceIsSupportBioAuthPay", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("deviceIsSupportBioAuthPay", jsonObject) } } function isUserOpenBioAuthPay(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "isUserOpenBioAuthPay", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("isUserOpenBioAuthPay", jsonObject) } } function callOpenBioAuthPay(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callOpenBioAuthPay", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callOpenBioAuthPay", jsonObject) } } function callBioAuthenticateInit(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callBioAuthenticateInit", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callBioAuthenticateInit", jsonObject) } } function checkAppIsInstalled(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "checkAppIsInstalled", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("checkAppIsInstalled", jsonObject) } } function callAudioPlayerSDK(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callAudioPlayerSDK", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callAudioPlayerSDK", jsonObject) } } function callChangeAudioPlayerStatus(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callChangeAudioPlayerStatus", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callChangeAudioPlayerStatus", jsonObject) } } function getContactsPermission(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getContactsPermission", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("getContactsPermission", jsonObject) } } function getNativePrivateData(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getNativePrivateData", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("getNativePrivateData", jsonObject) } } function getAppChannel(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getAppChannel", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("getAppChannel", jsonObject) } } function callUpdateApp() { if (isAndroid) { var str = JSON.stringify({ "methodName": "callUpdateApp", }); prompt(str) } else { SNNativeClient.callHandler("callUpdateApp", null) } } function callCustomCamera(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callCustomCamera", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callCustomCamera", jsonObject) } } function callGetUserFaceImg(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callGetUserFaceImg", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callGetUserFaceImg", jsonObject) } } function getRHWalletChannel(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getRHWalletChannel", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("getRHWalletChannel", jsonObject) } } function checkCommonlyUsedKey(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "checkCommonlyUsedKey", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("checkCommonlyUsedKey", jsonObject) } } function addCommonlyUsedKey(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "addCommonlyUsedKey", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("addCommonlyUsedKey", jsonObject) } } function callEncryptData(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callEncryptData", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callEncryptData", jsonObject) } } function callDecryptData(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callDecryptData", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callDecryptData", jsonObject) } } function callSysAddressBook(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callSysAddressBook", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callSysAddressBook", jsonObject) } } function callPageRoute(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callPageRoute", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callPageRoute", jsonObject) } } function FaceIdcheckSNBank(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "FaceIdcheckSNBank", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("FaceIdcheckSNBank", jsonObject) } } function callVisualTel(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callVisualTel", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("callVisualTel", jsonObject) } } function callAutoLogin(jsonObject) {
            if (isAndroid) {
                var str = JSON.stringify({ "methodName": "callAutoLogin", "jsonValue": jsonObject });
                prompt(str)
            } else { SNNativeClient.callHandler("callAutoLogin", jsonObject) }
        } function getStatusHeight(jsonObject) { if (isAndroid) { } else { SNNativeClient.callHandler("getStatusHeight", jsonObject) } } function callPPTVSign() { if (isAndroid) { var str = JSON.stringify({ "methodName": "callPPTVSign", }); prompt(str) } else { SNNativeClient.callHandler("callPPTVSign", null) } } function identityVerification(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "identityVerification", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("identityVerification", jsonObject) } } function H5SendResponseInfoToNative(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "H5SendResponseInfoToNative", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("H5SendResponseInfoToNative", jsonObject) } } function statSNFCustomEvent(arg) { if (typeof arg == "string" && arguments[1]) { arg = { eventType: arg, eventDetail: arguments[1] } } if (isAndroid) { var str = JSON.stringify({ "methodName": "statSNFCustomEvent", "jsonValue": arg }); prompt(str) } else { SNNativeClient.callHandler("statSNFCustomEvent", arg) } } function getEBuySafeInfo(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "getEBuySafeInfo", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("getEBuySafeInfo", jsonObject) } } function callMetroPayment(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callMetroPayment", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callMetroPayment", jsonObject) } } function openThirdApp(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openThirdApp", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("openThirdApp", jsonObject) } } function callIDCheckFviss(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callIDCheckFviss", "jsonValue": jsonObject }); prompt(str) } else { SNNativeClient.callHandler("callIDCheckFviss", jsonObject) } } function openLinkInExternalBrowsers(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openLinkInExternalBrowsers", "jsonValue": jsonObject }); prompt(str) } } function callSuningCard() { if (isAndroid) { var str = JSON.stringify({ "methodName": "callSuningCard" }); prompt(str) } else { SNNativeClient.callHandler("callSuningCard", null) } } function callFaceCheckByIdName(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callFaceCheckByIdName", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("callFaceCheckByIdName", jsonObject) } } function uploadAppInfoList(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "uploadAppInfoList", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("uploadAppInfoList", jsonObject) } } function callWeChatMiniProgram(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callWeChatMiniProgram", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("callWeChatMiniProgram", jsonObject) } } function queryNewAudioPlayerStatusForContentId(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "queryNewAudioPlayerStatusForContentId", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("queryNewAudioPlayerStatusForContentId", jsonObject) } } function startNewAudioPlayer(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "startNewAudioPlayer", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("startNewAudioPlayer", jsonObject) } } function pauseNewAudioPlayer(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "pauseNewAudioPlayer", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("pauseNewAudioPlayer", jsonObject) } } function callUpdateIdCard(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "callUpdateIdCard", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("callUpdateIdCard", jsonObject) } } function jsyktAuthLogin(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "jsyktAuthLogin", "jsonValue": jsonObject }); prompt(str) } } function jsyktCheckIssueConditions(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "jsyktCheckIssueConditions", "jsonValue": jsonObject }); prompt(str) } } function jsyktIssuerCard(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "jsyktIssuerCard", "jsonValue": jsonObject }); prompt(str) } } function jsyktRechargeCard(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "jsyktRechargeCard", "jsonValue": jsonObject }); prompt(str) } } function jsyktQueryCardInfo(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "jsyktQueryCardInfo", "jsonValue": jsonObject }); prompt(str) } } function jsyktQuerySeid(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "jsyktQuerySeid", "jsonValue": jsonObject }); prompt(str) } } function CMBSign(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "CMBSign", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("CMBSign", jsonObject) } } function callFinclipMiniProgram(jsonObject) {
            if (isAndroid) {
                var str = JSON.stringify({ "methodName": "callFinclipMiniProgram", "jsonValue": jsonObject });
                return prompt(str, str)
            } else { SNNativeClient.callHandler("callFinclipMiniProgram", jsonObject) }
        } function snfOnload() { if (!isAndroid) { window.onload() } } function uploadMorePicturesToSNB(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "uploadMorePicturesToSNB", "jsonValue": jsonObject }); return prompt(str, str) } else { SNNativeClient.callHandler("uploadMorePicturesToSNB", jsonObject) } } function checkPaySDKJsApi(jsonObject) { if (isAndroid) { var str = JSON.stringify({ "methodName": "checkPaySDKJsApi", "jsonValue": jsonObject }); prompt(str) } else { YifubaoJSBridge.callHandler("checkPaySDKJsApi", jsonObject) } } function openSDK(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openSDK", "jsonValue": data }); prompt(str) } else { YifubaoJSBridge.callHandler("getSNMPayRequest", data) } } function openSDK2_0(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openSDK2_0", "jsonValue": data }); return prompt(str, str) } else { YifubaoJSBridge.callHandler("payForSDKV2", data) } } function openSDK2_business(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openSDK2_business", "jsonValue": data }); return prompt(str, str) } else { YifubaoJSBridge.callHandler("openSDK2_business", data) } } function openSDK2_paywithCashier3(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openSDK2_paywithCashier3", "jsonValue": data }); return prompt(str, str) } else { YifubaoJSBridge.callHandler("openSDK2_paywithCashier3", data) } } function openSDK2_addBankCard(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openSDK2_addBankCard", "jsonValue": data }); return prompt(str, str) } else { YifubaoJSBridge.callHandler("openSDK2_addBankCard", data) } } function openSDK2_paywithPengHuaChannel(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openSDK2_paywithPengHuaChannel", "jsonValue": data }); return prompt(str, str) } else { YifubaoJSBridge.callHandler("openSDK2_paywithPengHuaChannel", data) } } function openSDKByToken(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "openSDKByToken", "jsonValue": data }); return prompt(str, str) } else { YifubaoJSBridge.callHandler("openSDKByToken", data) } } function queryOneClickPayStatus(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "queryOneClickPayStatus", "jsonValue": data }); return prompt(str, str) } else { YifubaoJSBridge.callHandler("queryOneClickPayStatus", data) } } function page4QueryRecommendPayMode(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "page4QueryRecommendPayMode", "jsonValue": data }); return prompt(str, str) } else { YifubaoJSBridge.callHandler("page4QueryRecommendPayMode", data) } } function cart2QueryAvailablePayMode(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "cart2QueryAvailablePayMode", "jsonValue": data }); return prompt(str, str) } else { YifubaoJSBridge.callHandler("cart2QueryAvailablePayMode", data) } } function page3EbuyPreQueryPayMode(data) { if (isAndroid) { var str = JSON.stringify({ "methodName": "page3EbuyPreQueryPayMode", "jsonValue": data }); return prompt(str, str) } else { YifubaoJSBridge.callHandler("page3EbuyPreQueryPayMode", data) } } window.SNNativeClient = { send: send_SNF, registerHandler: registerHandler, callHandler: callHandler_SNF, _fetchQueue: _fetchQueue_SNF, _handleMessageFromObjC: _handleMessageFromObjC_SNF, configWebView: configWebView, openLinkInSafari: openLinkInSafari, gotoFund: gotoFund, gotoYifubaoBalance: gotoYifubaoBalance, callRealName: callRealName, callNewRealName: callNewRealName, advancedAuth: advancedAuth, FaceIdcheck: FaceIdcheck, getCameraPermission: getCameraPermission, callPhoneNumber: callPhoneNumber, advancedRealName: advancedRealName, logonOut: logonOut, freedomUnfreeze: freedomUnfreeze, registerAccount: registerAccount, fundZhuanRu: fundZhuanRu, showRightButtons: showRightButtons, showRightButtonMenu: showRightButtonMenu, showNavRightButtonRedDot: showNavRightButtonRedDot, toHomeActivity: toHomeActivity, callNativeShare: callNativeShare, callNativeShare2: callNativeShare2, callNativeShare3: callNativeShare3, callNativeShareUrl: callNativeShareUrl, callNativeShareImage: callNativeShareImage, syncCookie: syncCookie, closeWebView: closeWebView, openUnit: openUnit, getIMEI: getIMEI, getDeviceModel: getDeviceModel, getDeviceInfo: getDeviceInfo, getIMEIByEncrypt: getIMEIByEncrypt, updateTitle: updateTitle, callCloudOpenAccountService: callCloudOpenAccountService, statH5Performance: statH5Performance, openOnlineService: openOnlineService, showConversationList: showConversationList, openSMSMessage: openSMSMessage, getOS: getOS, getNetworkType: getNetworkType, scanQRCode: scanQRCode, backToRootViewCtr: backToRootViewCtr, toBack: toBack, YFBGetBankCardIDFromBWC: YFBGetBankCardIDFromBWC, jumpLoginOfBill: jumpLoginOfBill, showRightButtonsOfCrowdfunding: showRightButtonsOfCrowdfunding, getMobileContact: getMobileContact, callSystemSms: callSystemSms, openTransferSDK: openTransferSDK, openRechargeSDK: openRechargeSDK, checkJsApi: checkJsApi, getFullDeviceInfo: getFullDeviceInfo, transferDetailShare: transferDetailShare, openTransferBillDetail: openTransferBillDetail, openPaymentCode: openPaymentCode, showOrHiddenBkBtn: showOrHiddenBkBtn, showOrHiddenNavigationBar: showOrHiddenNavigationBar, collectH5ErrorLog: collectH5ErrorLog, getRiskToken: getRiskToken, openContactTransfer: openContactTransfer, openRecharge: openRecharge, openMobileFlowRecharge: openMobileFlowRecharge, chooseImage: chooseImage, chooseImageAndUpload: chooseImageAndUpload, openPicPreview: openPicPreview, openRenXingLoan: openRenXingLoan, openAddBankCard: openAddBankCard, getRealNameStatus: getRealNameStatus, openScanQRCode: openScanQRCode, callXMBikeUnlockSDK: callXMBikeUnlockSDK, getLocationPermission: getLocationPermission, getLocationPermissionForLoan: getLocationPermissionForLoan, getLoginStatus: getLoginStatus, callPaymentSetting: callPaymentSetting, callModifyBindMobile: callModifyBindMobile, callResetPayPwd: callResetPayPwd, callResetLoginPwd: callResetLoginPwd, callBillModule: callBillModule, callUserFeedback: callUserFeedback, callCustomCloseAction: callCustomCloseAction, setH5PageInfo: setH5PageInfo, saveImgToAlbum: saveImgToAlbum, openMembershipScore: openMembershipScore, snBankGetRiskInfo: snBankGetRiskInfo, snBankCallUploadIDCard: snBankCallUploadIDCard, callThanksForTheRedEnvelope: callThanksForTheRedEnvelope, openMyRedpacket: openMyRedpacket, openEBuyRedpacket: openEBuyRedpacket, callBillDetail: callBillDetail, deviceIsSupportTouchID: deviceIsSupportTouchID, isSupportOpenTouchIDPay: isSupportOpenTouchIDPay, callOpenTouchIDPay: callOpenTouchIDPay, callVisualTelephone: callVisualTelephone, getLocationInfo: getLocationInfo, callMemberTaskCenter: callMemberTaskCenter, deviceIsSupportBioAuthPay: deviceIsSupportBioAuthPay, isUserOpenBioAuthPay: isUserOpenBioAuthPay, callOpenBioAuthPay: callOpenBioAuthPay, checkAppIsInstalled: checkAppIsInstalled, callAudioPlayerSDK: callAudioPlayerSDK, callBioAuthenticateInit: callBioAuthenticateInit, callChangeAudioPlayerStatus: callChangeAudioPlayerStatus, getContactsPermission: getContactsPermission, getNativePrivateData: getNativePrivateData, getAppChannel: getAppChannel, callUpdateApp: callUpdateApp, callCustomCamera: callCustomCamera, callGetUserFaceImg: callGetUserFaceImg, getRHWalletChannel: getRHWalletChannel, getAddressBook: getAddressBook, checkCommonlyUsedKey: checkCommonlyUsedKey, addCommonlyUsedKey: addCommonlyUsedKey, collectH5LogInfo: collectH5LogInfo, callEncryptData: callEncryptData, callDecryptData: callDecryptData, callSysAddressBook: callSysAddressBook, callPageRoute: callPageRoute, FaceIdcheckSNBank: FaceIdcheckSNBank, callVisualTel: callVisualTel, callAutoLogin: callAutoLogin, getStatusHeight: getStatusHeight, callSystemAddressBook: callSystemAddressBook, callPPTVSign: callPPTVSign, jsyktAuthLogin: jsyktAuthLogin, jsyktCheckIssueConditions: jsyktCheckIssueConditions, jsyktIssuerCard: jsyktIssuerCard, jsyktRechargeCard: jsyktRechargeCard, jsyktQueryCardInfo: jsyktQueryCardInfo, jsyktQuerySeid: jsyktQuerySeid, snfOnload: snfOnload, identityVerification: identityVerification, callCustomBackAction: callCustomBackAction, callBackAction: callBackAction, callTaskCountdown: callTaskCountdown, H5SendResponseInfoToNative: H5SendResponseInfoToNative, statSNFCustomEvent: statSNFCustomEvent, getEBuySafeInfo: getEBuySafeInfo, callMetroPayment: callMetroPayment, openThirdApp: openThirdApp, callIDCheckFviss: callIDCheckFviss, callSuningCard: callSuningCard, openLinkInExternalBrowsers: openLinkInExternalBrowsers, setTitleBarBgAndTextColor: setTitleBarBgAndTextColor, callFaceCheckByIdName: callFaceCheckByIdName, uploadAppInfoList: uploadAppInfoList, callWeChatMiniProgram: callWeChatMiniProgram, uploadMorePicturesToSNB: uploadMorePicturesToSNB, queryNewAudioPlayerStatusForContentId: queryNewAudioPlayerStatusForContentId, startNewAudioPlayer: startNewAudioPlayer, pauseNewAudioPlayer: pauseNewAudioPlayer, CMBSign: CMBSign, callUpdateIdCard: callUpdateIdCard, callFinclipMiniProgram: callFinclipMiniProgram };
        window.YifubaoJSBridge = { send: send_PaySDK, registerHandler: registerHandler, callHandler: callHandler_PaySDK, _fetchQueue: _fetchQueue_PaySDK, _handleMessageFromObjC: _handleMessageFromObjC__PaySDK, openSDK: openSDK, openSDK2_0: openSDK2_0, openSDK2_business: openSDK2_business, openSDK2_paywithCashier3: openSDK2_paywithCashier3, openSDK2_addBankCard: openSDK2_addBankCard, openSDK2_paywithPengHuaChannel: openSDK2_paywithPengHuaChannel, checkPaySDKJsApi: checkPaySDKJsApi, openSDKByToken: openSDKByToken, queryOneClickPayStatus: queryOneClickPayStatus, page4QueryRecommendPayMode: page4QueryRecommendPayMode, cart2QueryAvailablePayMode: cart2QueryAvailablePayMode, page3EbuyPreQueryPayMode: page3EbuyPreQueryPayMode }; if (!isAndroid) { var doc = document; _createQueueReadyIframe(doc); window.SNFNativeClient = window.SNNativeClient }
    }
})();